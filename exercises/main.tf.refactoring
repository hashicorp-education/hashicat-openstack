locals {
  images = yamldecode(file("${path.module}/images.yaml"))
}

resource "openstack_images_image_v2" "images" {
  for_each = local.images

  name             = each.key
  image_source_url = each.value.image_source_url
  container_format = each.value.container_format
  disk_format      = each.value.disk_format

  properties = each.value.properties
}

########################
# Data Block
########################
data "openstack_networking_network_v2" "public_network" {
  name = "public"
}

data "openstack_networking_network_v2" "shared_network" {
  name = "shared"
}

data "openstack_networking_subnet_v2" "subnet_1" {
  name       = "shared-subnet"
  network_id = data.openstack_networking_network_v2.shared_network.id
}
########################


# Router
resource "openstack_networking_router_v2" "router_1" {
  name                = "my_router"
  admin_state_up      = true
  external_network_id = data.openstack_networking_network_v2.public_network.id
}

resource "openstack_networking_router_interface_v2" "router_interface_1" {
  router_id = openstack_networking_router_v2.router_1.id
  subnet_id = data.openstack_networking_subnet_v2.subnet_1.id
}

resource "openstack_networking_secgroup_v2" "secgroup_1" {
  name        = "secgroup_1"
  description = "a security group"
}

# Allow ICMP (ping)
resource "openstack_networking_secgroup_rule_v2" "allow_ping" {
  direction         = "ingress"
  ethertype         = "IPv4"
  protocol          = "icmp"
  remote_ip_prefix  = "0.0.0.0/0"
  security_group_id = openstack_networking_secgroup_v2.secgroup_1.id
}

# Allow SSH
resource "openstack_networking_secgroup_rule_v2" "ssh" {
  direction         = "ingress"
  ethertype         = "IPv4"
  protocol          = "tcp"
  port_range_min    = 22
  port_range_max    = 22
  remote_ip_prefix  = "0.0.0.0/0"
  security_group_id = openstack_networking_secgroup_v2.secgroup_1.id
}

# Allow 80 service
resource "openstack_networking_secgroup_rule_v2" "web" {
  direction         = "ingress"
  ethertype         = "IPv4"
  protocol          = "tcp"
  port_range_min    = 80
  port_range_max    = 80
  remote_ip_prefix  = "0.0.0.0/0"
  security_group_id = openstack_networking_secgroup_v2.secgroup_1.id
}

resource "openstack_compute_keypair_v2" "test-keypair" {
  name = "my-keypair"
}

resource "local_file" "ssh_private_key" {
  content         = openstack_compute_keypair_v2.test-keypair.private_key
  file_permission = "0600"
  filename        = "openstack_ssh_private"
}

resource "openstack_compute_instance_v2" "instance" {
  count       = var.instance_count
  name        = "instance${count.index}"
  image_id    = openstack_images_image_v2.images["Ubuntu-24.04-noble"].id
  flavor_name = "m1.small"
  key_pair    = openstack_compute_keypair_v2.test-keypair.name
  security_groups = [
    openstack_networking_secgroup_v2.secgroup_1.name
  ]

  metadata = {
    server = "web",
    color  = "blue"
  }

  network {
    name = data.openstack_networking_network_v2.shared_network.name
  }
}

# Floating IP
resource "openstack_networking_floatingip_v2" "floatip" {
  count = var.instance_count
  pool  = data.openstack_networking_network_v2.public_network.name
}

data "openstack_networking_port_v2" "port" {
  count      = var.instance_count
  device_id  = openstack_compute_instance_v2.instance[count.index].id
  network_id = openstack_compute_instance_v2.instance[count.index].network.0.uuid
}

# Floating IP를 Port에 연결
resource "openstack_networking_floatingip_associate_v2" "fip_assoc" {
  count       = var.instance_count
  floating_ip = openstack_networking_floatingip_v2.floatip[count.index].address
  port_id     = data.openstack_networking_port_v2.port[count.index].id
}

# Provisioner
resource "terraform_data" "configure_api" {
  count = var.instance_count

  depends_on = [
    openstack_networking_floatingip_associate_v2.fip_assoc
  ]

  triggers_replace = [
    openstack_compute_instance_v2.instance[count.index].created,
    var.placeholder
  ]

  connection {
    type                = "ssh"
    timeout             = "600s"
    user                = "ubuntu"
    private_key         = openstack_compute_keypair_v2.test-keypair.private_key
    host                = openstack_networking_floatingip_v2.floatip[count.index].address
    bastion_user        = "ubuntu"
    bastion_private_key = file("${path.module}/bashtion_ssh_private")
    bastion_host        = element(regex("(\\d+\\.\\d+\\.\\d+\\.\\d+)", var.openstack_url), 0)
  }

  provisioner "file" {
    source      = "files/"
    destination = "/tmp/"
  }

  provisioner "remote-exec" {
    inline = [
      "sudo mv /tmp/static-web-server.service /etc/systemd/system/static-web-server.service",
      "sudo systemctl daemon-reload",
      "sudo systemctl stop static-web-server",
      "cp /tmp/static-web-server /home/ubuntu",
      "cp /tmp/deploy_app.sh /home/ubuntu",
      "chmod +x static-web-server",
      "chmod +x *.sh",
      "mkdir -p /home/ubuntu/www",
      "chown -R ubuntu:ubuntu /home/ubuntu/www",
      "PLACEHOLDER=\"${var.placeholder}-${count.index}\" ./deploy_app.sh",
      "sudo systemctl start static-web-server",
    ]
  }
}

resource "terraform_data" "check_api" {
  count = var.instance_count

  depends_on = [
    terraform_data.configure_api
  ]

  triggers_replace = [
    timestamp()
  ]

  provisioner "remote-exec" {
    inline = [
      "echo =================== Check API ==================",
      "curl ${openstack_networking_floatingip_v2.floatip[count.index].address}",
      "echo ================================================"
    ]

    connection {
      type        = "ssh"
      timeout     = "300s"
      user        = "ubuntu"
      private_key = file("${path.module}/bashtion_ssh_private")
      host        = element(regex("(\\d+\\.\\d+\\.\\d+\\.\\d+)", var.openstack_url), 0)
    }
  }
}